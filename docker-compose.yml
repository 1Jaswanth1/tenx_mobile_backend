version: '3.8'

# 10xR Healthcare Platform - Docker Compose
# This file is for LOCAL DEVELOPMENT ONLY
# Production deployments use Kubernetes/ECS with environment variables from infrastructure

services:
    # ===========================================================================
    # Application Service
    # ===========================================================================
    app:
        build:
            context: .
            dockerfile: Dockerfile
            args:
                NODE_ENV: production
        container_name: 10xr-backend
        restart: unless-stopped
        ports:
            - "3000:3000"
        environment:
            # Core Application
            NODE_ENV: production
            PORT: 3000
            HOSTNAME: "0.0.0.0"

            # Database - Use service name for internal Docker network
            DATABASE_URL: postgresql://postgres:password@postgres:5432/tenxr_platform

            # Redis - Use service name for internal Docker network
            REDIS_URL: redis://redis:6379

            # Authentication - MUST be set via infrastructure in production
            BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-local-dev-secret-change-me}
            BETTER_AUTH_URL: ${BETTER_AUTH_URL:-http://localhost:3000}

            # Application URL
            NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}

            # Optional: Resource limits
            NODE_OPTIONS: "--max-old-space-size=4096"

            # Optional: Timezone
            TZ: UTC
            LANG: en_US.UTF-8
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        networks:
            - 10xr-network
        # Resource limits (optional)
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 4G
                reservations:
                    cpus: '1'
                    memory: 2G

    # ===========================================================================
    # PostgreSQL Database
    # ===========================================================================
    postgres:
        image: postgres:16-alpine
        container_name: 10xr-postgres
        restart: unless-stopped
        environment:
            POSTGRES_DB: tenxr_platform
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: password
            PGDATA: /var/lib/postgresql/data/pgdata
        ports:
            - "5432:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - 10xr-network

    # ===========================================================================
    # Redis Cache & Queue
    # ===========================================================================
    redis:
        image: redis:7-alpine
        container_name: 10xr-redis
        restart: unless-stopped
        command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - 10xr-network

    # ===========================================================================
    # Optional: pgAdmin - PostgreSQL Management UI
    # ===========================================================================
    pgadmin:
        image: dpage/pgadmin4:latest
        container_name: 10xr-pgadmin
        restart: unless-stopped
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@10xr.local
            PGADMIN_DEFAULT_PASSWORD: admin
            PGADMIN_CONFIG_SERVER_MODE: 'False'
            PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
        ports:
            - "5050:80"
        volumes:
            - pgadmin_data:/var/lib/pgadmin
        depends_on:
            - postgres
        networks:
            - 10xr-network
        profiles:
            - tools

    # ===========================================================================
    # Optional: Redis Commander - Redis Management UI
    # ===========================================================================
    redis-commander:
        image: rediscommander/redis-commander:latest
        container_name: 10xr-redis-commander
        restart: unless-stopped
        environment:
            - REDIS_HOSTS=local:redis:6379
        ports:
            - "8081:8081"
        depends_on:
            - redis
        networks:
            - 10xr-network
        profiles:
            - tools

# =============================================================================
# Volumes for Data Persistence
# =============================================================================
volumes:
    postgres_data:
        driver: local
        name: 10xr_postgres_data
    redis_data:
        driver: local
        name: 10xr_redis_data
    pgadmin_data:
        driver: local
        name: 10xr_pgadmin_data

# =============================================================================
# Networks
# =============================================================================
networks:
    10xr-network:
        driver: bridge
        name: 10xr_network

# =============================================================================
# Usage Instructions:
# =============================================================================
#
# Start all services:
#   docker-compose up -d
#
# Start with GUI tools (pgAdmin & Redis Commander):
#   docker-compose --profile tools up -d
#
# View logs:
#   docker-compose logs -f
#   docker-compose logs -f app
#
# Stop all services:
#   docker-compose down
#
# Stop and remove volumes (WARNING: This deletes all data):
#   docker-compose down -v
#
# Rebuild application:
#   docker-compose build app
#   docker-compose up -d --force-recreate app
#
# Run database migrations:
#   docker-compose exec app pnpm db:migrate
#
# Access services:
#   Application:      http://localhost:3000
#   PostgreSQL:       localhost:5432
#   Redis:            localhost:6379
#   pgAdmin:          http://localhost:5050 (with --profile tools)
#   Redis Commander:  http://localhost:8081 (with --profile tools)
#
# =============================================================================